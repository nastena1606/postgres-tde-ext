{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"<code>pg_tde</code> documentation","text":"<p><code>pg_tde</code> is the extension that brings in Transparent Data Encryption (TDE) to PostgreSQL and enables users to keep sensitive data safe and secure. </p> <p>Important</p> <p>This is the MVP version of the extension and is not meant for production use yet.</p>"},{"location":"index.html#whats-encrypted","title":"What\u2019s encrypted","text":"<p><code>pg_tde</code> encrypts the following:</p> <ul> <li>User data in tables, including TOAST tables, that are created using the extension. Metadata of those tables is not encrypted. </li> <li>Write-Ahead Log (WAL) data for tables created using the extension </li> <li>Temporary tables created during the database operation for data tables created using the extension</li> </ul>"},{"location":"index.html#whats-not-encrypted","title":"What\u2019s not encrypted","text":"<p>In the MVP version of <code>pg_tde</code>, the following is unencrypted:</p> <ul> <li>Indexes</li> <li>Logical replication</li> <li><code>NULL</code> bitmaps of tuples</li> <li>Keys in the keyfile if local keyfile is used</li> </ul> <p>The encryption of indexes and <code>NULL</code> bitmaps of tuples is planned for the next releases of <code>pg_tde</code>.</p> <p> Warning: Note that introducing encryption/decryption affects performance. Our benchmark tests show less than 10% performance overhead.</p> <p>Get started</p>"},{"location":"index.html#supported-postgresql-versions","title":"Supported PostgreSQL versions","text":"<p><code>pg_tde</code> is currently based on PostgreSQL 16.0 and supported for Percona Distribution for PostgreSQL 16.x and upstream PostgreSQL 16.x. </p>"},{"location":"index.html#useful-links","title":"Useful links","text":"<ul> <li>What is Transparent Data Encryption</li> </ul>"},{"location":"contribute.html","title":"Contributing guide","text":"<p>Welcome to <code>pg_tde</code> - the Transparent Data Encryption extension for PostgreSQL!</p> <p>We\u2019re glad that you would like to become a community member and contribute to this project.</p> <p>You can contribute in one of the following ways:</p> <ol> <li>Reach us on our Forums.</li> <li>Submit a bug report or a feature request</li> <li>Submit a pull request (PR) with the code patch</li> <li>Contribute to documentation</li> </ol>"},{"location":"contribute.html#prerequisites","title":"Prerequisites","text":"<p>Before submitting code contributions, we ask you to complete the following prerequisites.</p>"},{"location":"contribute.html#1-sign-the-cla","title":"1. Sign the CLA","text":"<p>Before you can contribute, we kindly ask you to sign our Contributor License Agreement (CLA). You can do this in on click using your GitHub account.</p> <p>Note:  You can sign it later, when submitting your first pull request. The CLA assistant validates the PR and asks you to sign the CLA to proceed.</p>"},{"location":"contribute.html#2-code-of-conduct","title":"2. Code of Conduct","text":"<p>Please make sure to read and agree to our Code of Conduct.</p>"},{"location":"contribute.html#submitting-a-pull-request","title":"Submitting a pull request","text":"<p>All bug reports, enhancements and feature requests are tracked in GitHub issues. Though not mandatory, we encourage you to first check for a bug report among the issues and in the PR list: perhaps the bug has already been addressed. </p> <p>For feature requests and enhancements, we do ask you to create a GitHub issue, describe your idea and discuss the design with us. This way we align your ideas with our vision for the product development.</p> <p>If the bug hasn\u2019t been reported / addressed, or we\u2019ve agreed on the enhancement implementation with you, do the following:</p> <ol> <li>Fork this repository</li> <li>Clone this repository on your machine. </li> <li>Create a separate branch for your changes. If you work on a GitHub issue, please create a branch from it. This makes it easier to track your contribution.</li> <li>Make your changes. Please follow the guidelines outlined in the C style and Coding rules to improve code readability.</li> <li>Test your changes locally. </li> <li>Commit the changes. The commit message guidelines will help you with writing great commit messages</li> <li>Open a PR.</li> <li>Our team will review your code and if everything is correct, will merge it.  Otherwise, we will contact you for additional information or with the request to make changes.</li> </ol>"},{"location":"contribute.html#contribute-to-documentation","title":"Contribute to documentation","text":"<p><code>pg_tde</code> documentation is written in Markdown language, so you can  edit it online via GitHub. If you wish to have more control over the doc process, jump to how to edit documentation locally. </p> <p>Before you start, learn what git, MkDocs and Docker are and what Markdown is and how to write it. For your convenience, there\u2019s also a cheat sheet to help you with the syntax. </p> <p>The doc files are in the <code>docs</code> directory.</p>"},{"location":"contribute.html#edit-documentation-online-via-github","title":"Edit documentation online via GitHub","text":"<ol> <li>Click the Edit this page icon next to the page title. The source <code>.md</code> file of the page opens in GitHub editor in your browser. If you haven\u2019t worked with the repository before, GitHub creates a fork of it for you.</li> <li>Edit the page. You can check your changes on the Preview tab. </li> <li>Commit your changes.<ul> <li>In the Commit changes section, describe your changes.</li> <li>Select the Create a new branch for this commit and start a pull request option</li> <li>Click Propose changes.</li> </ul> </li> <li>GitHub creates a branch and a commit for your changes. It loads a new page on which you can open a pull request to Percona. The page shows the base branch - the one you offer your changes for, your commit message and a diff - a visual representation of your changes against the original page. This allows you to make a last-minute review. When you are ready, click the Create pull request button.</li> <li>Someone from our team reviews the pull request and if everything is correct, merges it into the documentation. Then it gets published on the site.</li> </ol>"},{"location":"contribute.html#edit-documentation-locally","title":"Edit documentation locally","text":"<p>This option is for users who prefer to work from their computer and / or have the full control over the documentation process.</p> <p>The steps are the following:</p> <ol> <li>Fork this repository</li> <li>Clone the repository on your machine:</li> </ol> <pre><code>git clone git@github.com:&lt;your-name&gt;/postgres-tde-ext.git\n\n3. Change the directory to ``postgres-tde-ext`` and add the remote upstream repository:\n\n```sh\ngit remote add upstream git@github.com:Percona-Lab/postgres-tde-ext.git\n</code></pre> <ol> <li>Pull the latest changes from upstream</li> </ol> <pre><code>git fetch upstream\ngit merge upstream/main\n</code></pre> <ol> <li>Create a separate branch for your changes</li> </ol> <pre><code>git checkout -b &lt;my_branch&gt;\n</code></pre> <ol> <li>Make changes</li> <li> <p>Commit your changes. The commit message guidelines will help you with writing great commit messages</p> </li> <li> <p>Open a pull request to Percona</p> </li> </ol>"},{"location":"contribute.html#building-the-documentation","title":"Building the documentation","text":"<p>To verify how your changes look, generate the static site with the documentation. This process is called building. You can do it in these ways: - Use Docker - Install MkDocs and build locally</p>"},{"location":"contribute.html#use-docker","title":"Use Docker","text":"<ol> <li>Get Docker</li> <li>We use our Docker image to build documentation. Run the following command:</li> </ol> <p><pre><code>cd documentation\ndocker run --rm -v $(pwd):/docs perconalab/pmm-doc-md mkdocs build\n</code></pre>    If Docker can\u2019t find the image locally, it first downloads the image, and then runs it to build the documentation.</p> <ol> <li>Go to the <code>site</code> directory and open the <code>index.html</code> file to see the documentation.</li> </ol> <p>If you want to see the changes as you edit the docs, use this command instead:</p> <pre><code>cd documentation\ndocker run --rm -v $(pwd):/docs -p 8000:8000 perconalab/pmm-doc-md mkdocs serve --dev-addr=0.0.0.0:8000\n</code></pre> <p>Wait until you see <code>INFO    -  Start detecting changes</code>, then enter <code>0.0.0.0:8000</code> in the browser\u2019s address bar. The documentation automatically reloads after you save the changes in source files.</p>"},{"location":"contribute.html#install-mkdocs-and-build-locally","title":"Install MkDocs and build locally","text":"<ol> <li> <p>Install Python.</p> </li> <li> <p>Install MkDocs and required extensions:</p> <pre><code>pip install -r requirements.txt\n</code></pre> </li> <li> <p>Build the site:</p> <pre><code>cd documentation\nmkdocs build\n</code></pre> </li> <li> <p>Open <code>site/index.html</code></p> </li> </ol> <p>Or, to run the built-in web server:</p> <pre><code>cd documentation\nmkdocs serve\n</code></pre> <p>View the site at http://0.0.0.0:8000</p>"},{"location":"install.html","title":"Installation","text":""},{"location":"install.html#considerations","title":"Considerations","text":"<p>You can use the following options to manage encryption keys:</p> <ul> <li> <p>Use the HashiCorp Vault server. This is the recommended approach. The Vault server configuration is out of scope of this document. We assume that you have the Vault server up and running. For the  <code>pg_tde</code> configuration, you need the following information:</p> <ul> <li>The secret access token to the Vault server</li> <li>The URL to access the Vault server</li> <li>(Optional) The CA file used for SSL verification</li> </ul> </li> <li> <p>Use the local keyfile. This approach is rather used for development and testing purposes since the keys are stored unencrypted in the specified keyfile.</p> </li> </ul>"},{"location":"install.html#procedure","title":"Procedure","text":"<p>Install <code>pg_tde</code> using one of available installation methods:</p> Build from sourcePackage managerRun in Docker <ol> <li> <p>To build <code>pg_tde</code> from source code, you require the following on Ubuntu/Debian:</p> <pre><code>sudo apt install make gcc libjson-c-dev postgresql-server-dev-16 libcurl4-openssl-dev\n</code></pre> </li> <li> <p>Install Percona Distribution for PostgreSQL 16 or upstream PostgreSQL 16</p> </li> <li> <p>If PostgreSQL is installed in a non standard directory, set the <code>PG_CONFIG</code> environment variable to point to the <code>pg_config</code> executable.</p> </li> <li> <p>Clone the repository:  </p> <pre><code>git clone git://github.com/Percona-Lab/postgres-tde-ext\n</code></pre> </li> <li> <p>Compile and install the extension</p> <pre><code>cd postgres-tde-ext\n./configure\nmake USE_PGXS=1\nsudo make USE_PGXS=1 install\n</code></pre> </li> </ol> <p>Currently only DEB packages are available. If you are running RPM-based operating system, consider building the extension from source or running it in Docker</p> <ol> <li> <p>Download the latest release package</p> <pre><code>wget https://github.com/Percona-Lab/postgres-tde-ext/releases/download/latest/pgtde-pgdg16.deb\n</code></pre> </li> <li> <p>Install the package</p> <pre><code>sudo dpkg -i pgtde-pgdg16.deb\n</code></pre> </li> </ol> <p>You can find Docker images built from the current main branch on Docker Hub. Images are built on top of postgres:16 official image.     </p> <p>To run <code>pg_tde</code> in Docker, use the following command:    </p> <pre><code>docker run --name pg-tde -e POSTGRES_PASSWORD=mysecretpassword -d perconalab/postgres-tde-ext\n</code></pre> <p>It builds and adds <code>pg_tde</code> extension to PostgreSQL 16. Relevant <code>postgresql.conf</code> and <code>tde_conf.json</code> are created in <code>/etc/postgresql/</code> inside the container. This directory is exposed as a volume.    </p> <p>See Docker Docs on usage.    </p> <p>You can also build a Docker image manually with:    </p> <pre><code>docker build . -f ./docker/Dockerfile -t your-image-name\n</code></pre>"},{"location":"install.html#next-steps","title":"Next steps","text":"<p>Setup</p>"},{"location":"replication.html","title":"Streaming replication configuration","text":""},{"location":"setup.html","title":"Setup","text":"<p>Load the <code>pg_tde</code> at the start time. The extension requires additional shared memory; therefore,  add the <code>pg_tde</code> value for the <code>shared_preload_libraries</code> parameter and restart the <code>postgresql</code> instance.</p> <ol> <li> <p>Use the ALTER SYSTEM command from <code>psql</code> terminal to modify the <code>shared_preload_libraries</code> parameter.</p> <pre><code>ALTER SYSTEM SET shared_preload_libraries = 'pg_tde';\n</code></pre> </li> <li> <p>Start or restart the <code>postgresql</code> instance to apply the changes.</p> <ul> <li>On Debian and Ubuntu:    </li> </ul> <pre><code>sudo systemctl restart postgresql.service\n</code></pre> <ul> <li>On RHEL and derivatives</li> </ul> <pre><code>sudo systemctl restart postgresql-16\n</code></pre> </li> <li> <p>Create the extension using the CREATE EXTENSION command. You must have the privileges of a superuser or a database owner to use this command. Connect to <code>psql</code> as a superuser for a database and run the following command:</p> <pre><code>CREATE EXTENSION pg_tde;\n</code></pre> <p>By default, the <code>pg_tde</code> extension is created for the currently used database. To encrypt the data in other databases, you must explicitly run the <code>CREATE EXTENSION</code> command against them. </p> <p>Tip</p> <p>You can have the <code>pg_tde</code> extension automatically enabled for every newly created database. Modify the template <code>template1</code> database as follows: </p> <pre><code>psql -d template1 -c 'CREATE EXTENSION pg_tde;'\n</code></pre> </li> <li> <p>Set the location of the keyring configuration file in postgresql.conf: <code>pg_tde.keyringConfigFile = '/where/to/put/the/keyring.json'</code></p> </li> <li>Create the keyring configuration file</li> <li> <p>Start or restart the <code>postgresql</code> instance to apply the changes.</p> <ul> <li>On Debian and Ubuntu:    </li> </ul> <pre><code>sudo systemctl restart postgresql.service\n</code></pre> <ul> <li>On RHEL and derivatives</li> </ul> <pre><code>sudo systemctl restart postgresql-16\n</code></pre> </li> </ol>"},{"location":"setup.html#keyring-configuration","title":"Keyring configuration","text":"<p>Create the keyring configuration file with the following contents:</p> HashiCorp VaultLocal keyfile <pre><code>{\n        'provider': 'vault-v2',\n        'token': 'ROOT_TOKEN',\n        'url': 'http://127.0.0.1:8200',\n        'mountPath': 'secret'\n        'caPath': '&lt;path/to/caFile&gt;'\n}\n</code></pre> <p>where:</p> <ul> <li><code>provider</code> is set to <code>vault-v2</code> since only the version 2 of the KV secrets engine is supported</li> <li><code>url</code> is the URL of the Vault server</li> <li><code>mountPath</code> is the mount point where the keyring should store the keys</li> <li><code>token</code> is an access token with read and write access to the above mount point</li> <li>[optional] <code>caPath</code> is the path of the CA file used for SSL verification</li> </ul> <pre><code>{\n        'provider': 'file',\n        'datafile': '/tmp/pgkeyring',\n}\n</code></pre> <p>This keyring configuration has the file provider, with a single datafile parameter.     </p> <p>This datafile is created and managed by PostgreSQL, the only requirement is that <code>postgres</code> should be able to write to the specified path.     </p> <p>This setup is intended for development, and stores the keys unencrypted in the specified data file.</p>"},{"location":"tde.html","title":"What is Transparent Data Encryption (TDE)","text":"<p>Transparent Data Encryption offers encryption at the file level and solves the problem of protecting data at rest. The encryption is transparent for users allowing them to access and manipulate the data and not to worry about the encryption process.</p>"},{"location":"tde.html#how-does-it-work","title":"How does it work?","text":"<p>To encrypt the data, two types of keys are used:</p> <ul> <li>Database keys to encrypt user data. These are stored internally, near the data that they encrypt.</li> <li>The master key to encrypt database keys. It is kept separately from the database keys and is managed externally. </li> </ul> <p><code>pg_tde</code> is integrated with HashiCorp Vault server to store and manage master keys. Only the back end KV Secrets Engine - Version 2 (API) is supported.</p> <p>The encryption process is the following:</p> <p></p> <p>When a user creates an encrypted table using <code>pg_tde</code>, a new random key is generated for that table. This key is used to encrypt all data the user inserts in that table. Eventually the encrypted data gets stored in the underlying storage. </p> <p>The table itself is encrypted using the master key. The master key is stored externally in the Vault key management store. </p> <p>Similarly when the user queries the encrypted table, the master key is retrieved from the key store to decrypt the table. Then the same unique internal key for that table is used to decrypt the data, and unencrypted data gets returned to the user. So, effectively, every TDE table has a unique key, and each table key is encrypted using the master key.</p>"},{"location":"tde.html#why-do-you-need-tde","title":"Why do you need TDE?","text":"<p>Using TDE has the following benefits:</p> <ul> <li> <p>For organizations:</p> <ul> <li>Ensure data safety when at rest and in motion</li> <li>Comply with security standards like HIPAA, PCI DSS, SOC 2, ISO 27001</li> </ul> </li> <li> <p>For DBAs:</p> <ul> <li>Allows defining what to encrypt in the table and with what key</li> <li>Encryption on storage level is not a must to provide data safety. However, using TDE and storage-level encryption together adds another layer of data security</li> </ul> </li> </ul> <p>See also</p> <p>Percona Blog: Transparent Data Encryption (TDE)</p>"},{"location":"test.html","title":"Test Transparent Data Encryption","text":"<p>To check if the data is encrypted, do the following:</p> <ol> <li>Create a table in the database for which you have enabled <code>pg_tde</code></li> <li> <p>Run the following function:</p> <pre><code>select pgtde_is_encrypted('table_name');\n</code></pre> <p>The function returns <code>t</code> if the table is encrypted and <code>f</code> - if not.</p> </li> </ol>"},{"location":"uninstall.html","title":"Uninstall <code>pg_tde</code>","text":"<p>If you no longer wish to use TDE in your deployment, you can remove the <code>pg_tde</code> extension. To do that, your user must have the privileges of the superuser or a database owner.</p> <p>Here\u2019s how to do it:</p> <ol> <li>Drop the extension using the <code>DROP EXTENSION</code> with <code>CASCADE</code> command</li> </ol> <p> Warning: The use of the CASCADE parameter deletes all tables that were created in the database with <code>pg_tde</code> enabled.</p> <pre><code>DROP EXTENSION pg_tde CASCADE\n</code></pre> <ol> <li> <p>Run the <code>DROP EXTENSION</code> command against every database where you have enabled the <code>pg_tde</code> extension</p> </li> <li> <p>Modify the <code>shared_preload_libraries</code> and remove the \u2018pg_tde\u2019 from it. Use the <code>ALTER SYSTEM SET</code> command for this purpose</p> </li> <li> <p>Start or restart the <code>postgresql</code> instance to apply the changes.</p> <ul> <li>On Debian and Ubuntu:    </li> </ul> <pre><code>sudo systemctl restart postgresql.service\n</code></pre> <ul> <li>On RHEL and derivatives</li> </ul> <pre><code>sudo systemctl restart postgresql-16\n</code></pre> </li> </ol>"}]}