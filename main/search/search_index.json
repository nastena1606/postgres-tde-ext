{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"<code>pg_tde</code> documentation","text":"<p><code>pg_tde</code> is the extension that brings in Transparent Data Encryption (TDE) to PostgreSQL and enables users to keep sensitive data safe and secure. </p> <p>Important</p> <p>This is the MVP version of the extension and is not meant for production use yet.</p>"},{"location":"index.html#whats-encrypted","title":"What\u2019s encrypted","text":"<p><code>pg_tde</code> encrypts the following:</p> <ul> <li>User data in tables, including TOAST tables, that are created using the extension. Metadata of those tables is not encrypted. </li> <li>Write-Ahead Log (WAL) data for tables created using the extension </li> <li>Temporary tables created during the database operation for data tables created using the extension</li> </ul>"},{"location":"index.html#whats-not-encrypted","title":"What\u2019s not encrypted","text":"<p>In the MVP version of <code>pg_tde</code>, the following remains unencrypted:</p> <ul> <li>Indexes</li> <li>Logical replication</li> <li><code>NULL</code> bitmaps of tuples</li> <li>Keys in the keyring file</li> </ul> <p>Their encryption is planned for the next releases of <code>pg_tde</code>.</p> <p> Warning: Note that introducing encryption/decryption affects performance. Our benchmark tests show less than 10% performance overhead.</p> <p>Get started</p>"},{"location":"index.html#supported-postgresql-versions","title":"Supported PostgreSQL versions","text":"<p><code>pg_tde</code> is currently supported for Percona Distribution for PostgreSQL 16 and upstream PostgreSQL 16. </p>"},{"location":"index.html#useful-links","title":"Useful links","text":"<ul> <li>What is Transparent Data Encryption</li> </ul>"},{"location":"install.html","title":"Installation","text":"<p>Install <code>pg_tde</code> using one of available installation methods:</p> Build from sourcePackage managerRun in Docker <ol> <li> <p>To build <code>pg_tde</code> from source code, you require the following on Ubuntu/Debian:</p> <pre><code>sudo apt install make gcc libjson-c-dev postgresql-server-dev-16\n</code></pre> </li> <li> <p>Install Percona Distribution for PostgreSQL 16 or upstream PostgreSQL 16</p> </li> <li> <p>If PostgreSQL is installed in a non standard directory, set the <code>PG_CONFIG</code> environment variable to point to the <code>pg_config</code> executable.</p> </li> <li> <p>Clone the repository:  </p> <pre><code>git clone git://github.com/Percona-Lab/postgres-tde-ext\n</code></pre> </li> <li> <p>Compile and install the extension</p> <pre><code>cd postgres-tde-ext\nmake USE_PGXS=1\nsudo make USE_PGXS=1 install\n</code></pre> </li> </ol> <p>Currently only DEB packages are available. If you are running RPM-based operating system, consider building the extension from source or running it in Docker</p> <ol> <li> <p>Download the latest release package</p> <pre><code>wget https://github.com/Percona-Lab/postgres-tde-ext/releases/download/latest/pgtde-pgdg16.deb\n</code></pre> </li> <li> <p>Install the package</p> <pre><code>sudo dpkg -i pgtde-pgdg16.deb\n</code></pre> </li> </ol> <p>You can find Docker images built from the current main branch on Docker Hub. Images are built on top of postgres:16 official image.     </p> <p>To run <code>pg_tde</code> in Docker, use the following command:    </p> <pre><code>docker run --name pg-tde -e POSTGRES_PASSWORD=mysecretpassword -d perconalab/postgres-tde-ext\n</code></pre> <p>It builds and adds <code>pg_tde</code> extension to PostgreSQL 16. Relevant <code>postgresql.conf</code> and <code>tde_conf.json</code> are created in <code>/etc/postgresql/</code> inside the container. This directory is exposed as a volume.    </p> <p>See Docker Docs on usage.    </p> <p>You can also build a Docker image manually with:    </p> <pre><code>docker build . -f ./docker/Dockerfile -t your-image-name\n</code></pre>"},{"location":"install.html#next-steps","title":"Next steps","text":"<p>Setup</p>"},{"location":"replication.html","title":"Streaming replication configuration","text":""},{"location":"setup.html","title":"Setup","text":"<p>Load the <code>pg_tde</code> at the start time. The extension requires additional shared memory; therefore,  add the <code>pg_tde</code> value for the <code>shared_preload_libraries</code> parameter and restart the <code>postgresql</code> instance.</p> <ol> <li> <p>Use the ALTER SYSTEM command from <code>psql</code> terminal to modify the <code>shared_preload_libraries</code> parameter.</p> <pre><code>ALTER SYSTEM SET shared_preload_libraries = 'pg_tde';\n</code></pre> </li> <li> <p>Start or restart the <code>postgresql</code> instance to apply the changes.</p> <ul> <li>On Debian and Ubuntu:    </li> </ul> <pre><code>sudo systemctl restart postgresql.service\n</code></pre> <ul> <li>On RHEL and derivatives</li> </ul> <pre><code>sudo systemctl restart postgresql-16\n</code></pre> </li> <li> <p>Create the extension using the CREATE EXTENSION command. You must have the privileges of a superuser or a database owner to use this command. Connect to <code>psql</code> as a superuser for a database and run the following command:</p> <pre><code>CREATE EXTENSION pg_tde;\n</code></pre> <p>By default, the <code>pg_tde</code> extension is created for the <code>postgres</code> database or the database which your user owns. To encrypt the data in other databases, you must explicitly run the <code>CREATE EXTENSION</code> command for them. </p> <p>Tip</p> <p>You can have the <code>pg_tde</code> extension automatically enabled for every newly created database. Modify the template <code>template1</code> database as follows: </p> <pre><code>psql -d template1 -c 'CREATE EXTENSION pg_tde;'\n</code></pre> </li> <li> <p>Set the location of the keyring configuration file in postgresql.conf: <code>pg_tde.keyringConfigFile = '/where/to/put/the/keyring.json'</code></p> </li> <li>Create the keyring configuration file</li> <li> <p>Start or restart the <code>postgresql</code> instance to apply the changes.</p> <ul> <li>On Debian and Ubuntu:    </li> </ul> <pre><code>sudo systemctl restart postgresql.service\n</code></pre> <ul> <li>On RHEL and derivatives</li> </ul> <pre><code>sudo systemctl restart postgresql-16\n</code></pre> </li> </ol>"},{"location":"setup.html#keyring-configuration","title":"Keyring configuration","text":"<pre><code>{\n        'provider': 'file',\n        'datafile': '/tmp/pgkeyring',\n}\n</code></pre> <p>Currently the keyring configuration only supports the file provider, with a single datafile parameter.</p> <p>This datafile is created and managed by PostgreSQL, the only requirement is that <code>postgres</code> should be able to write to the specified path.</p> <p>This setup is intended for development, and stores the keys unencrypted in the specified data file.</p>"},{"location":"tde.html","title":"What is Transparent Data Encryption (TDE)","text":"<p>Transparent Data Encryption offers encryption at the file level and solves the problem of protecting data at rest. The encryption is completely transparent for users allowing them to access and manipulate the data and not to worry about the encryption process.</p>"},{"location":"tde.html#how-does-it-work","title":"How does it work?","text":"<p>In the MVP version of <code>pg_tde</code>, the keyring configuration file is used to store encryption keys. </p> <p>When a user creates an encrypted table using <code>pg_tde</code>, a new random key is generated for that table. This key is used to encrypt all data the user inserts in that table. Eventually the encrypted data gets stored in the underlying storage. </p> <p>Similarly when the user queries the encrypted table, the same unique key for that table is used to decrypt the data, and unencrypted data gets returned to the user. So effectively every TDE table has a unique key, and each table key is encrypted using the master key.</p>"},{"location":"tde.html#why-do-you-need-tde","title":"Why do you need TDE?","text":"<p>Using TDE has the following benefits:</p> <ul> <li> <p>For organizations:</p> <ul> <li>Ensure data safety when at rest and in motion</li> <li>Comply with security standards like HIPAA, PCI DSS, SOC 2, ISO 27001</li> </ul> </li> <li> <p>For DBAs:</p> <ul> <li>Allows defining what to encrypt in the table and with what key</li> <li>Encryption on storage level is not a must to provide data safety. However, using TDE and storage-level encryption together adds another layer of data security</li> </ul> </li> </ul> <p>See also</p> <p>Percona Blog: Transparent Data Encryption (TDE)</p>"},{"location":"test.html","title":"Test Transparent Data Encryption","text":"<p>To check if the data is encrypted, do the following:</p> <ol> <li>Create a table in the database for which you have enabled <code>pg_tde</code></li> <li>Insert some test data </li> <li> <p>Run the following function:</p> <pre><code>select pgtde_is_encrypted('table_name');\n</code></pre> <p>The function returns <code>t</code> if the table is encrypted and <code>f</code> - if not.</p> </li> </ol>"},{"location":"uninstall.html","title":"Uninstall <code>pg_tde</code>","text":"<p>If you no longer wish to use TDE in your deployment, you can remove the <code>pg_tde</code> extension. To do that, your user must have the privileges of the superuser or a database owner.</p> <p>Here\u2019s how to do it:</p> <ol> <li>Drop the extension using the <code>DROP EXTENSION</code> with <code>CASCADE</code> command</li> </ol> <p> Warning: The use of the CASCADE parameter deletes all tables that were created in the database with <code>pg_tde</code> enabled.</p> <pre><code>DROP EXTENSION pg_tde CASCADE\n</code></pre> <ol> <li> <p>Run the <code>DROP EXTENSION</code> command against every database where you have enabled the <code>pg_tde</code> extension</p> </li> <li> <p>Modify the <code>shared_preload_libraries</code> and remove the \u2018pg_tde\u2019 from it. Use the <code>ALTER SYSTEM SET</code> command for this purpose</p> </li> <li> <p>Start or restart the <code>postgresql</code> instance to apply the changes.</p> <ul> <li>On Debian and Ubuntu:    </li> </ul> <pre><code>sudo systemctl restart postgresql.service\n</code></pre> <ul> <li>On RHEL and derivatives</li> </ul> <pre><code>sudo systemctl restart postgresql-16\n</code></pre> </li> </ol>"}]}